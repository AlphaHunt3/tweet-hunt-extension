import React, { Component } from 'react';

interface ErrorBoundaryProps {
  children: React.ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
}

class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    // æ›´æ–° stateï¼Œä¸‹æ¬¡æ¸²æŸ“æ˜¾ç¤º fallback UI
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    console.log('ðŸ™…é”™è¯¯è¾¹ç•Œï¼šReact ErrorBoundary caught an error', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // æ¸²æŸ“ç©ºå†…å®¹
      return null;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
